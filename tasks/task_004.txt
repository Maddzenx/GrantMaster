# Task ID: 4
# Title: Build Grant Discovery Dashboard
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Create the main dashboard interface displaying available grants with filtering, search, and sorting capabilities.
# Details:
1. Create dashboard layout components:
   - DashboardLayout.tsx: Main layout with navigation
   - GrantList.tsx: Display grants in card format
   - GrantCard.tsx: Individual grant display component
   - FilterPanel.tsx: Filter controls component
2. Implement filter functionality:
   - Create filter state using React hooks
   - Add sector filter (dropdown)
   - Add stage filter (checkbox group)
   - Add deadline filter (date range picker)
   - Implement filter logic in useGrants hook
3. Add search functionality:
   - Create SearchBar component with debounced input
   - Implement keyword search against grant titles and descriptions
   - Add search highlighting
4. Implement grant data fetching:
   - Create custom hook useGrants() to fetch grants from Supabase
   - Add pagination support (10 grants per page)
   - Implement sorting options (deadline, relevance)
5. Add responsive design for mobile and desktop views

# Test Strategy:
1. Test filter combinations to ensure correct results
2. Verify search functionality with various keywords
3. Test pagination with different result set sizes
4. Ensure responsive design works on various screen sizes
5. Verify grant cards display all required information
6. Test performance with large numbers of grants
7. Verify 'View' button navigation works correctly

# Subtasks:
## 1. Dashboard Layout and Component Architecture [in-progress]
### Dependencies: None
### Description: Design and implement the core layout and component structure for the Grant Discovery Dashboard
### Details:
Create the main dashboard layout with header, filter sidebar, and grant list area. Implement the grant card component with title, description, funding amount, deadline, and tags. Define component props and state management. Ensure component reusability through proper abstraction. Performance optimization: implement virtualized list for grant cards to handle large datasets efficiently. UI/UX requirements: maintain consistent spacing, typography, and color scheme according to design system.

## 2. Filter Panel and Search Functionality [pending]
### Dependencies: 4.1
### Description: Implement comprehensive filtering and search capabilities for grants discovery
### Details:
Build filter panel with category, funding amount range, deadline, and status filters. Implement multi-select filter options with clear/reset functionality. Create search bar with typeahead suggestions and keyword highlighting. Performance optimization: debounce search input and implement memoization for filter combinations. UI/UX requirements: provide visual feedback for active filters, implement animations for filter panel expansion/collapse, ensure keyboard accessibility for all filter controls.

## 3. Data Fetching and State Management [pending]
### Dependencies: 4.1, 4.2
### Description: Implement data fetching logic and state management for grants data
### Details:
Create useGrants custom hook for fetching and managing grants data. Implement pagination with configurable page size. Add sorting functionality by relevance, deadline, and funding amount. Handle loading, error, and empty states. Performance optimization: implement request caching, add infinite scrolling with data windowing, and optimize re-renders with useMemo and useCallback. Ensure proper error handling and retry mechanisms for failed API requests.

## 4. Responsive Design and Final Optimizations [pending]
### Dependencies: 4.1, 4.2, 4.3
### Description: Ensure responsive behavior across all device sizes and implement final performance optimizations
### Details:
Implement responsive layouts using CSS Grid/Flexbox with breakpoints for mobile, tablet, and desktop. Create collapsible filter panel for mobile view. Optimize images with lazy loading and proper sizing. Implement skeleton screens for loading states. Performance optimization: add code splitting for dashboard components, optimize bundle size, implement service worker for offline capability. Conduct cross-browser testing and accessibility audit (WCAG 2.1 AA compliance).

